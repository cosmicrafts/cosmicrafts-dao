type AsteroidBelt = record { id : nat64; name : text };
type Building = record {
  id : nat64;
  level : nat64;
  building_type : BuildingType;
};
type BuildingType = variant { Mine; Shipyard };
type Entity = record {
  id : principal;
  metadata : text;
  owner_id : principal;
  entity_type : EntityType;
  coords : vec float64;
};
type EntityType = variant {
  AsteroidBelt;
  Building;
  Moon;
  Star;
  Unit;
  StarSystem;
  AncientRuins;
  Planet;
  Fleet;
  BlackHole;
  Nebulae;
  Artifacts;
};
type FriendDetails = record { id : principal; username : text; avatar : nat32 };
type Moon = record {
  id : nat64;
  is_rogue : bool;
  habitability : text;
  name : text;
  temperature_range : record { float64; float64 };
  gravity : float64;
  owner_id : opt principal;
  atmosphere : vec text;
  planet_id : nat64;
  moon_type : text;
  coordinates : record { float64; float64 };
};
type Planet = record {
  id : nat64;
  moons : vec Moon;
  resources : vec Resource;
  habitability : text;
  name : text;
  system_id : nat64;
  max_miner_capacity : nat64;
  temperature_range : record { float64; float64 };
  gravity : float64;
  orbiting_fleets : vec nat64;
  owner_id : opt principal;
  atmosphere : vec text;
  planet_size : text;
  planet_subcategory : text;
  orbital_period_days : nat64;
  planet_category : text;
  coordinates : record { float64; float64 };
  buildings : vec Building;
};
type Player = record {
  id : principal;
  elo : float64;
  title : text;
  registration_date : nat64;
  username : text;
  description : text;
  level : nat32;
  language : text;
  friends : vec FriendDetails;
  avatar : nat32;
};
type Resource = record { resource_type : ResourceType; amount : nat64 };
type ResourceType = variant { Energy; Matter };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Result_2 = variant { Ok : record { bool; opt Player; text }; Err : text };
type Result_3 = variant { Ok : bool; Err : text };
type ShipType = variant { Scout };
type Star = record {
  id : nat64;
  age : float64;
  luminosity : float64;
  temperature : float64;
  mass : float64;
  name : text;
  spectral_type : text;
  stellar_class : text;
  is_binary : bool;
  companion_star_id : opt nat64;
  radius : float64;
  coordinates : record { float64; float64 };
};
type StarSystem = record {
  id : nat64;
  moons : vec Moon;
  asteroid_belts : vec AsteroidBelt;
  name : text;
  last_updated : nat64;
  planets : vec Planet;
  stars : vec Star;
  coordinates : record { int64; int64 };
};
service : {
  add_asteroid_belt_to_system : (nat64, AsteroidBelt) -> (Result);
  add_entity : (EntityType, record { float64; float64 }, text) -> (principal);
  add_moon_to_planet : (nat64, nat64, Moon) -> (Result);
  add_planet_to_system : (nat64, Planet) -> (Result);
  add_star_to_system : (nat64, Star) -> (Result);
  benchmark_spawn : (nat64) -> (nat64);
  build_ship : (nat64, ShipType) -> (Result_1);
  build_structure : (nat64, BuildingType) -> (Result_1);
  claim_planet : (nat64) -> (Result);
  create_asteroid_belt : (principal, principal) -> (Result);
  create_black_hole : (record { float64; float64 }, principal) -> (Result);
  create_fleet : () -> (Result_1);
  create_moon : (principal, principal) -> (Result);
  create_nebula : (record { float64; float64 }, principal) -> (Result);
  create_open_star_cluster : (nat32, principal) -> (Result);
  create_planet : (principal, principal, record { float64; float64 }) -> (
      Result,
    );
  create_planetary_system : (principal, principal) -> (Result);
  create_star : (record { float64; float64 }, principal) -> (Result);
  create_star_cluster : (nat32, principal) -> (Result);
  export_entities : () -> (vec record { float64; float64; text }) query;
  find_entities_in_area : (
      record { float64; float64 },
      record { float64; float64 },
    ) -> (vec Entity) query;
  find_nearby_entities : (float64, float64, float64) -> (vec Entity) query;
  generate_star_system : (text) -> (nat64);
  get_entity_by_id : (principal) -> (opt Entity) query;
  get_planet : (nat64) -> (opt Planet) query;
  get_player : () -> (opt Player) query;
  get_star_system : (nat64) -> (opt StarSystem) query;
  get_tick_count : () -> (nat64) query;
  move_building : (nat64, record { float64; float64 }) -> (Result);
  move_fleet : (nat64, record { float64; float64 }) -> (Result);
  nearby_buildings : (float64, float64, float64) -> (vec nat64) query;
  nearby_fleets : (float64, float64, float64) -> (vec nat64) query;
  nearby_planets : (float64, float64, float64) -> (vec nat64) query;
  nearest_star_system : (float64, float64) -> (opt nat64) query;
  planets_in_area : (
      record { float64; float64 },
      record { float64; float64 },
    ) -> (vec nat64) query;
  remove_asteroid_belt_from_system : (nat64, nat64) -> (Result);
  remove_building : (nat64) -> (Result);
  remove_entity : (principal) -> (Result);
  remove_fleet : (nat64) -> (Result);
  remove_moon_from_planet : (nat64, nat64, nat64) -> (Result);
  remove_planet_from_system : (nat64, nat64) -> (Result);
  remove_star_from_system : (nat64, nat64) -> (Result);
  remove_star_system : (nat64) -> (Result);
  signup : (text, nat32, opt text, text) -> (Result_2);
  spawn_entities_auto_batched_backup : (nat64) -> (Result_1);
  start_tick : () -> ();
  stop_tick : () -> ();
  transfer_entity : (principal, principal) -> (Result);
  update_entity : (principal, record { float64; float64 }, opt text) -> (
      Result,
    );
  update_planet_coordinates : (nat64, record { float64; float64 }) -> (Result);
  update_star_system : (nat64, record { int64; int64 }) -> (Result);
  upgrade_building : (nat64, nat64) -> (Result);
  validate_entity_distances : (principal, float64) -> (Result_3) query;
}
